(()=>{"use strict";function e(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const t=function t(n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),e(this,"_getTemplate",(function(){o._card=document.querySelector(o._template).content.cloneNode(!0)})),e(this,"createCard",(function(){return o._getTemplate(),o._cardImage=o._card.querySelector(".cards__photo"),o._cardImage.src=o._cardlink,o._cardImage.alt=o._cardtitle,o._card.querySelector(".cards__title").textContent=o._cardtitle,o._cardRemove=o._card.querySelector(".cards__delete"),o._likesCounter=o._card.querySelector(".cards__like-counter"),o._cardlike&&o._id?(o._cardlike.length>0&&(o._cardlike.forEach((function(e){e._id===o._userId&&o._card.querySelector(".cards__like").classList.add("cards__like_active")})),o._likesCounter.classList.add("cards__like-counter_visible"),o._likesCounter.textContent=o._cardlike.length),o._id===o._userId&&o._cardRemove.classList.add("cards__delete_visible")):o._cardRemove.classList.add("cards__delete_visible"),o._setListeners(o._likesCounter),o._card})),e(this,"_setListeners",(function(e){o._card.querySelector(".cards__like").addEventListener("click",(function(t){o._handleCardClickLike(t,e)})),o._card.querySelector(".cards__delete").addEventListener("click",o._handleCardClickDelete),o._card.querySelector(".cards__fullphoto").addEventListener("click",(function(){o._handleCardClickImage(o._cardtitle,o._cardlink)}))})),this._cardtitle=n.data.name,this._cardlink=n.data.link,this._cardlike=n.data.like,this._id=n.data.id,this._userId=n.data.userId,this._template=r,this._handleCardClickImage=n.handleCardClickImage,this._handleCardClickDelete=n.handleCardClickDelete,this._handleCardClickLike=n.handleCardClickLike};function n(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const r=function e(t,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),n(this,"enableValidation",(function(){o._form.addEventListener("submit",(function(e){e.preventDefault()})),o._setEventListeners()})),n(this,"_setEventListeners",(function(){o._inputList=Array.from(o._form.querySelectorAll(o._inputs)),o._inputList.forEach((function(e){e.addEventListener("input",(function(){o._input=e,o._isValid(),o.toggleButtonState()}))}))})),n(this,"_isValid",(function(){o._input.validity.valid?o._hideError():o._showError(o._input.validationMessage)})),n(this,"toggleButtonState",(function(){o._button=o._form.querySelector(o._submitButton),o._form.checkValidity()?(o._button.classList.remove(o._inactiveButton),o._button.removeAttribute("disabled")):(o._button.classList.add(o._inactiveButton),o._button.setAttribute("disabled","disabled"))})),n(this,"_showError",(function(e){o._span=o._form.querySelector("#".concat(o._input.id,"-error")),o._span.textContent=e,o._input.classList.add(o._inputError)})),n(this,"_hideError",(function(){o._span=o._form.querySelector("#".concat(o._input.id,"-error")),o._span.textContent="",o._input.classList.remove(o._inputError)})),n(this,"hideErrorWithOpen",(function(){o._inputList=Array.from(o._form.querySelectorAll(o._inputs)),o._inputList.forEach((function(e){e.classList.remove("popup__text_type_error"),o._span=document.getElementById(["".concat(e.id,"-error")]),o._span.textContent=""}))})),this._form=r,this._submitButton=t.submitButton,this._inactiveButton=t.inactiveButton,this._inputs=t.inputs,this._inputError=t.inputError};function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const i=function e(t,n){var r=this,i=t.items,c=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),o(this,"renderCards",(function(){r._items.forEach((function(e){r._card=r._renderer(e)}))})),o(this,"appendItem",(function(e){r._container.append(e)})),o(this,"prependItem",(function(e){r._container.prepend(e)})),this._items=i,this._renderer=c,this._container=document.querySelector(n)};function c(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const u=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.code&&o.close()},(n="handleEscClose")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popupWindow=document.querySelector(t)}var t,n;return t=e,(n=[{key:"open",value:function(){this._popupWindow.classList.add("popup_visible_on"),document.addEventListener("keydown",this.handleEscClose)}},{key:"close",value:function(){this._popupWindow.classList.remove("popup_visible_on"),document.removeEventListener("keydown",this.handleEscClose)}},{key:"setEventListeners",value:function(){var e=this;this._popupWindow.addEventListener("click",(function(t){(t.target===t.currentTarget||t.target.classList.contains("popup__close"))&&e.close()}))}}])&&c(t.prototype,n),e}();function a(e){return(a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function l(e,t){return!t||"object"!==a(t)&&"function"!=typeof t?f(e):t}function f(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function p(e,t,n){return(p="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=d(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}const h=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=d(t);if(n){var o=d(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return l(this,e)});function o(e,t){var n,i,c;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),_(f(c=r.call(this,e)),"_getInputValues",(function(){return c._el={},c._inputs=c._form.querySelectorAll("input"),c._inputs.forEach((function(e){c._el[e.name]=e.value})),c._el})),_(f(c),"setEventListeners",(function(){p((n=f(c),d(o.prototype)),"setEventListeners",n).call(n),c._form.addEventListener("submit",(function(){c._submitForm(c._getInputValues())}))})),_(f(c),"close",(function(){p((i=f(c),d(o.prototype)),"close",i).call(i),c._form.reset()})),c._form=c._popupWindow.querySelector(".popup__infosave"),c._submitForm=t,c}return o}(u);function y(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function m(e){return(m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function v(e,t){return(v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function b(e,t){return!t||"object"!==m(t)&&"function"!=typeof t?g(e):t}function g(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function k(e,t,n){return(k="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=w(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function w(e){return(w=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const S=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&v(e,t)}(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=w(t);if(n){var o=w(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return b(this,e)});function o(e){var t,n,i,c,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),u=function(e,r){k((t=g(n),w(o.prototype)),"open",t).call(t),n._fullImage.src=e,n._fullImage.alt=r,n._fullImageDescription.textContent=r},(c="open")in(i=g(n=r.call(this,e)))?Object.defineProperty(i,c,{value:u,enumerable:!0,configurable:!0,writable:!0}):i.open=u,n._fullImage=n._popupWindow.querySelector(".popup__image"),n._fullImageDescription=n._popupWindow.querySelector(".popup__subtitle"),n}return o}(u);function E(e){return(E="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function O(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function C(e,t,n){return(C="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}})(e,t,n||e)}function L(e,t){return(L=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function R(e,t){return!t||"object"!==E(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function j(e){return(j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&L(e,t)}(c,e);var t,n,r,o,i=(r=c,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return R(this,e)});function c(e){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,c),i.call(this,e)}return t=c,(n=[{key:"setEventListeners",value:function(){var e=this;C(j(c.prototype),"setEventListeners",this).call(this),this._popupWindow.addEventListener("submit",(function(t){t.preventDefault(),e._submitform()}))}},{key:"submitAction",value:function(e){this._submitform=e}}])&&O(t.prototype,n),c}(u);function q(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}const I=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._options=t}var t,n;return t=e,(n=[{key:"_checkResStatus",value:function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))}},{key:"getProfile",value:function(){var e=this;return fetch("".concat(this._options.baseUrl,"/users/me"),{headers:this._options.headers}).then((function(t){return e._checkResStatus(t)}))}},{key:"getInitialCards",value:function(){var e=this;return fetch("".concat(this._options.baseUrl,"/cards"),{headers:this._options.headers}).then((function(t){return e._checkResStatus(t)}))}},{key:"profileUpdate",value:function(e,t){var n=this;return fetch("".concat(this._options.baseUrl,"/users/me"),{method:"PATCH",headers:this._options.headers,body:JSON.stringify({name:e,about:t})}).then((function(e){return n._checkResStatus(e)}))}},{key:"deleteCard",value:function(e){var t=this;return fetch("".concat(this._options.baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._options.headers}).then((function(e){return t._checkResStatus(e)}))}},{key:"addCard",value:function(e,t){var n=this;return fetch("".concat(this._options.baseUrl,"/cards"),{method:"POST",headers:this._options.headers,body:JSON.stringify({name:e,link:t})}).then((function(e){return n._checkResStatus(e)}))}},{key:"addLike",value:function(e){var t=this;return fetch("".concat(this._options.baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._options.headers}).then((function(e){return t._checkResStatus(e)}))}},{key:"deleteLike",value:function(e){var t=this;return fetch("".concat(this._options.baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._options.headers}).then((function(e){return t._checkResStatus(e)}))}},{key:"profileAvatarUpdate",value:function(e){var t=this;return fetch("".concat(this._options.baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._options.headers,body:JSON.stringify({avatar:e})}).then((function(e){return t._checkResStatus(e)}))}}])&&q(t.prototype,n),e}();function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function B(e,t){return(B=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function U(e,t){return!t||"object"!==x(t)&&"function"!=typeof t?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):t}function T(e){return(T=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}const A=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&B(e,t)}(o,e);var t,n,r=(t=o,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=T(t);if(n){var o=T(this).constructor;e=Reflect.construct(r,arguments,o)}else e=r.apply(this,arguments);return U(this,e)});function o(e,t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,o),r.call(this,e,t)}return o}(h);var D=document.querySelector(".profile__edit"),W=document.querySelector(".profile__add"),V=(document.querySelector("input[name=description]"),document.querySelector("input[name=author]"),document.querySelector(".popup__infosave_type_edit")),N=document.querySelector(".popup__infosave_type_addcard"),J=(document.querySelector(".popup__save_edit"),document.querySelector(".popup__save_add"),document.getElementById("author-error"),document.getElementById("description-error"),document.querySelector(".cards__delete"),document.querySelector(".profile__avatar-link")),F=document.querySelector(".popup__infosave_type_profileUpdate"),H=document.querySelector(".popup__save_edit"),z=document.querySelector(".popup__save_profileUpdate"),M=document.querySelector(".popup__save_add"),G=document.querySelector(".popup__save_deletecard"),K={form:".popup__infosave",submitButton:".popup__save",inactiveButton:"popup__save_disabled",inputs:".popup__text",inputError:"popup__text_type_error"};function Q(e,t){t.textContent=e?t.textContent+"...":t.textContent.replace("...","")}document.querySelector(".cards");var X=function e(t,n){return new i({items:t,renderer:function(t){e().appendItem(ue(t.name,t.link,t.likes,t.owner._id,t._id,n))}},".cards")},Y=new I({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-26",headers:{authorization:"254f4d19-4cbe-4ebe-a16e-0232684f7a64","Content-Type":"application/json"}}),Z=new h(".popup_type_addcard",(function(e){Q(!0,M),Y.addCard(e.area,e.imagelink).then((function(t){e=t;var n=t.owner._id;X(e,n).prependItem(ue(e.name,e.link,e.likes,e.owner._id,e._id,n)),Z.close()})).catch((function(e){console.log(e)})).finally((function(){return Q(!1,M)}))}));Y.getProfile().then((function(e){return $.setUserInfo(e.name,e.about),$.setUserAvatar(e.avatar),e._id})).then((function(e){Y.getInitialCards().then((function(t){X(t,e).renderCards()})).catch((function(e){console.log(e)}))})).catch((function(e){console.log(e)}));var $=new function e(t,n,r){var o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),y(this,"getUserInfo",(function(){return{name:o._userName.textContent,profession:o._userDescription.textContent}})),y(this,"setUserInfo",(function(e,t){e&&(o._userName.textContent=e),t&&(o._userDescription.textContent=t)})),y(this,"setUserAvatar",(function(e){e&&(o._userAvatar.src=e)})),this._userName=document.querySelector(t),this._userDescription=document.querySelector(n),this._userAvatar=document.querySelector(r)}(".profile__title",".profile__subtitle",".profile__avatar"),ee=new S(".popup_type_image"),te=new P(".popup_type_deletecard"),ne=new h(".popup_type_edit",(function(e){Q(!0,H),Y.profileUpdate(e.author,e.description).then((function(){$.setUserInfo(e.author,e.description),ne.close()})).catch((function(e){console.log(e)})).finally((function(){Q(!1,H)}))})),re=new A(".popup_type_profileUpdate",(function(e){Q(!0,z),Y.profileAvatarUpdate(e.avatar).then((function(e){$.setUserAvatar(e.avatar),re.close()})).catch((function(e){console.log(e)})).finally((function(){return Q(!1,z)}))})),oe=new r(K,V),ie=new r(K,N),ce=new r(K,F);function ue(e,n,r,o,i,c){return new t({data:{name:e,link:n,like:r,id:o,userId:c},handleCardClickImage:function(){ee.open(n,e)},handleCardClickLike:function(e,t){var n=new Array;r.forEach((function(e){n.push(e._id)})),r.length>0&&n.includes(c)?Y.deleteLike(i).then((function(n){1===r.length&&t.classList.remove("cards__like-counter_visible"),t.textContent=r.length-1,e.target.classList.remove("cards__like_active"),r=n.likes})).catch((function(e){console.log(e)})):Y.addLike(i).then((function(n){t.classList.add("cards__like-counter_visible"),t.textContent=r.length+1,e.target.classList.add("cards__like_active"),r=n.likes})).catch((function(e){console.log(e)}))},handleCardClickDelete:function(e){var t=e.target.closest(".cards__card");te.open(),te.submitAction((function(){Q(!0,G),e.preventDefault(),Y.deleteCard(i).then((function(){t.remove(),te.close()})).catch((function(e){console.log(e)})).finally((function(){Q(!1,G)}))}))}},"#cards").createCard()}oe.enableValidation(),ie.enableValidation(),ce.enableValidation(),re.setEventListeners(),Z.setEventListeners(),ne.setEventListeners(),ee.setEventListeners(),te.setEventListeners(),D.addEventListener("click",(function(){var e=$.getUserInfo();V.elements.author.value=e.name,V.elements.description.value=e.profession,oe.hideErrorWithOpen(),oe.toggleButtonState(),ne.open()})),J.addEventListener("click",(function(){ce.hideErrorWithOpen(),ce.toggleButtonState(),re.open()})),W.addEventListener("click",(function(){ie.hideErrorWithOpen(),ie.toggleButtonState(),Z.open()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,